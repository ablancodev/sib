/* The following code was generated by JFlex 1.6.1 */

/* Secci√≥n de declaraciones de JFlex */
package sib.flex;

import sib.cup.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/sib/flex/AnalizadorLexicoFase2.flex</tt>
 */
public class AnalizadorLexicoFase2 implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int CADENA = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\72\1\70\1\74\1\72\1\71\22\0\1\72\1\52\1\57"+
    "\1\55\1\60\2\0\1\52\1\52\1\52\1\51\1\52\1\46\1\53"+
    "\1\45\1\54\1\66\1\64\1\62\2\63\5\66\1\0\1\47\1\52"+
    "\1\50\1\51\1\0\1\56\1\13\1\23\1\14\1\5\1\3\1\2"+
    "\1\16\1\11\1\1\1\67\1\15\1\6\1\17\1\4\1\20\1\12"+
    "\1\67\1\21\1\7\1\22\2\67\1\10\3\67\1\52\1\73\1\52"+
    "\1\0\1\61\1\0\1\32\1\41\1\34\1\67\1\37\1\27\1\36"+
    "\1\67\1\24\1\42\1\67\1\30\1\65\1\25\1\31\1\40\1\67"+
    "\1\33\1\35\1\26\1\44\3\67\1\43\1\67\1\52\1\0\1\52"+
    "\7\0\1\74\u1fa2\0\1\74\1\74\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\2\2\3\2\2\3\3"+
    "\11\2\1\4\1\5\1\6\1\7\1\10\1\11\1\4"+
    "\1\11\1\12\2\1\1\13\2\14\1\15\1\16\1\17"+
    "\1\1\1\20\1\2\3\3\1\21\22\2\1\0\1\22"+
    "\4\23\3\0\1\24\1\2\1\25\4\2\1\26\15\2"+
    "\1\0\1\23\1\27\1\0\1\30\16\2\1\31\6\2"+
    "\1\32\1\2\1\11\2\2\1\33\1\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\u016e\0\u01ab"+
    "\0\u016e\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc\0\u0319\0\u0356"+
    "\0\u0393\0\u03d0\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u016e"+
    "\0\172\0\172\0\172\0\172\0\172\0\172\0\u053e\0\172"+
    "\0\u057b\0\u05b8\0\u05f5\0\172\0\u0632\0\172\0\172\0\172"+
    "\0\u066f\0\u016e\0\u06ac\0\u06e9\0\u0726\0\172\0\172\0\u0763"+
    "\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e\0\u094b"+
    "\0\u0988\0\u09c5\0\u0a02\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33"+
    "\0\u0b70\0\u0bad\0\u057b\0\u0bea\0\u0c27\0\u0c64\0\172\0\u0ca1"+
    "\0\u0cde\0\u0d1b\0\172\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c"+
    "\0\u0e89\0\u016e\0\u0ec6\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7"+
    "\0\u1034\0\u1071\0\u10ae\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df"+
    "\0\u121c\0\u0ca1\0\u1259\0\u1259\0\u1296\0\u12d3\0\u1310\0\u134d"+
    "\0\u138a\0\u13c7\0\u1404\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535"+
    "\0\u1572\0\u15af\0\u016e\0\u15ec\0\u1629\0\u1666\0\u16a3\0\u16e0"+
    "\0\u171d\0\u016e\0\u175a\0\u016e\0\u1797\0\u17d4\0\u016e\0\u1811";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\7\1\11"+
    "\1\12\1\7\1\13\1\10\1\14\1\7\1\15\4\7"+
    "\1\16\1\17\1\20\1\21\1\22\1\7\1\23\1\24"+
    "\1\7\1\25\1\26\2\7\1\27\1\30\3\7\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\3\36\1\40"+
    "\1\41\1\42\3\43\1\7\1\43\1\7\1\44\1\45"+
    "\1\46\1\3\1\0\57\47\1\50\10\47\1\44\1\45"+
    "\1\47\1\51\1\47\76\0\1\7\1\52\14\7\1\53"+
    "\25\7\20\0\1\7\1\0\1\7\6\0\40\7\1\54"+
    "\3\7\10\0\1\55\1\56\4\0\1\57\1\0\1\7"+
    "\1\0\1\7\6\0\3\7\1\60\1\7\1\61\32\7"+
    "\1\54\3\7\10\0\1\55\1\56\6\0\1\7\1\0"+
    "\1\7\6\0\44\7\20\0\1\7\1\0\1\7\6\0"+
    "\40\7\1\54\3\7\10\0\1\55\1\56\6\0\1\7"+
    "\1\0\1\7\6\0\10\7\1\62\33\7\20\0\1\7"+
    "\1\0\1\7\6\0\12\7\1\63\31\7\20\0\1\7"+
    "\1\0\1\7\6\0\40\7\1\54\3\7\10\0\1\55"+
    "\1\56\3\0\3\57\1\7\1\0\1\7\6\0\40\7"+
    "\1\54\3\7\10\0\1\55\1\56\3\0\1\57\2\0"+
    "\1\7\1\0\1\7\6\0\2\7\1\64\35\7\1\54"+
    "\3\7\10\0\1\55\1\56\6\0\1\7\1\0\1\7"+
    "\6\0\24\7\1\65\17\7\20\0\1\7\1\0\1\7"+
    "\6\0\26\7\1\66\1\7\1\67\13\7\20\0\1\7"+
    "\1\0\1\7\6\0\36\7\1\70\5\7\20\0\1\7"+
    "\1\0\1\7\6\0\27\7\1\71\2\7\1\72\3\7"+
    "\1\73\5\7\20\0\1\7\1\0\1\7\6\0\40\7"+
    "\1\74\3\7\20\0\1\7\1\0\1\7\6\0\32\7"+
    "\1\75\1\76\10\7\20\0\1\7\1\0\1\7\6\0"+
    "\27\7\1\77\14\7\20\0\1\7\1\0\1\7\6\0"+
    "\25\7\1\100\16\7\20\0\1\7\1\0\1\7\6\0"+
    "\31\7\1\101\12\7\20\0\1\7\1\0\1\7\60\0"+
    "\1\102\6\0\3\43\1\0\1\43\7\0\44\103\20\0"+
    "\1\103\1\0\1\103\46\0\1\104\3\0\1\105\7\0"+
    "\1\106\1\107\63\0\1\110\6\0\1\111\5\0\3\43"+
    "\1\0\1\43\3\0\1\112\72\0\1\44\63\0\1\113"+
    "\16\0\11\7\1\114\32\7\20\0\1\7\1\0\1\7"+
    "\6\0\40\7\1\54\3\7\10\0\1\55\7\0\1\7"+
    "\1\0\1\7\46\0\1\55\13\0\1\55\20\0\4\7"+
    "\1\115\37\7\20\0\1\7\1\0\1\7\6\0\6\7"+
    "\1\116\35\7\20\0\1\7\1\0\1\7\6\0\1\117"+
    "\43\7\20\0\1\7\1\0\1\7\6\0\13\7\1\120"+
    "\30\7\20\0\1\7\1\0\1\7\6\0\15\7\1\121"+
    "\26\7\20\0\1\7\1\0\1\7\6\0\25\7\1\122"+
    "\16\7\20\0\1\7\1\0\1\7\6\0\32\7\1\72"+
    "\11\7\20\0\1\7\1\0\1\7\6\0\25\7\1\123"+
    "\16\7\20\0\1\7\1\0\1\7\6\0\24\7\1\124"+
    "\17\7\20\0\1\7\1\0\1\7\6\0\30\7\1\125"+
    "\13\7\20\0\1\7\1\0\1\7\6\0\31\7\1\126"+
    "\12\7\20\0\1\7\1\0\1\7\6\0\32\7\1\127"+
    "\11\7\20\0\1\7\1\0\1\7\6\0\41\7\1\130"+
    "\2\7\20\0\1\7\1\0\1\7\6\0\32\7\1\131"+
    "\11\7\20\0\1\7\1\0\1\7\6\0\33\7\1\132"+
    "\10\7\20\0\1\7\1\0\1\7\6\0\36\7\1\133"+
    "\5\7\20\0\1\7\1\0\1\7\6\0\31\7\1\134"+
    "\1\135\3\7\1\136\5\7\20\0\1\7\1\0\1\7"+
    "\6\0\32\7\1\137\11\7\20\0\1\7\1\0\1\7"+
    "\67\0\3\140\1\0\1\140\47\0\1\107\100\0\1\141"+
    "\104\0\1\107\101\0\3\142\1\0\1\142\61\0\1\143"+
    "\6\0\3\144\1\0\1\144\61\0\1\102\6\0\3\140"+
    "\1\0\1\140\3\0\1\112\3\0\17\7\1\145\24\7"+
    "\20\0\1\7\1\0\1\7\6\0\1\146\6\7\1\12"+
    "\34\7\20\0\1\7\1\0\1\7\6\0\2\7\1\52"+
    "\41\7\20\0\1\7\1\0\1\7\6\0\5\7\1\116"+
    "\36\7\20\0\1\7\1\0\1\7\6\0\14\7\1\147"+
    "\27\7\20\0\1\7\1\0\1\7\6\0\1\150\43\7"+
    "\20\0\1\7\1\0\1\7\6\0\36\7\1\122\5\7"+
    "\20\0\1\7\1\0\1\7\6\0\43\7\1\151\20\0"+
    "\1\7\1\0\1\7\6\0\31\7\1\65\12\7\20\0"+
    "\1\7\1\0\1\7\6\0\33\7\1\122\10\7\20\0"+
    "\1\7\1\0\1\7\6\0\44\7\20\0\1\152\1\0"+
    "\1\7\6\0\36\7\1\153\5\7\20\0\1\7\1\0"+
    "\1\7\6\0\31\7\1\154\12\7\20\0\1\7\1\0"+
    "\1\7\6\0\36\7\1\155\5\7\20\0\1\7\1\0"+
    "\1\7\6\0\26\7\1\122\15\7\20\0\1\7\1\0"+
    "\1\7\6\0\33\7\1\156\10\7\20\0\1\7\1\0"+
    "\1\7\6\0\23\7\1\157\20\7\20\0\1\7\1\0"+
    "\1\7\6\0\37\7\1\122\4\7\20\0\1\7\1\0"+
    "\1\7\6\0\25\7\1\160\16\7\20\0\1\7\1\0"+
    "\1\7\61\0\1\111\5\0\3\140\1\0\1\140\53\0"+
    "\1\107\111\0\3\144\1\0\1\144\7\0\20\7\1\161"+
    "\23\7\20\0\1\7\1\0\1\7\6\0\1\7\1\52"+
    "\42\7\20\0\1\7\1\0\1\7\6\0\12\7\1\162"+
    "\31\7\20\0\1\7\1\0\1\7\6\0\3\7\1\163"+
    "\40\7\20\0\1\7\1\0\1\7\6\0\25\7\1\164"+
    "\16\7\20\0\1\7\1\0\1\7\6\0\31\7\1\165"+
    "\12\7\20\0\1\7\1\0\1\7\6\0\33\7\1\65"+
    "\10\7\20\0\1\7\1\0\1\7\6\0\42\7\1\122"+
    "\1\7\20\0\1\7\1\0\1\7\6\0\24\7\1\166"+
    "\17\7\20\0\1\7\1\0\1\7\6\0\33\7\1\167"+
    "\10\7\20\0\1\7\1\0\1\7\6\0\24\7\1\170"+
    "\17\7\20\0\1\7\1\0\1\7\6\0\23\7\1\171"+
    "\20\7\20\0\1\7\1\0\1\7\6\0\21\7\1\172"+
    "\22\7\20\0\1\7\1\0\1\7\6\0\15\7\1\173"+
    "\26\7\20\0\1\7\1\0\1\7\6\0\30\7\1\174"+
    "\13\7\20\0\1\7\1\0\1\7\6\0\25\7\1\175"+
    "\16\7\20\0\1\7\1\0\1\7\6\0\25\7\1\174"+
    "\16\7\20\0\1\7\1\0\1\7\6\0\31\7\1\151"+
    "\12\7\20\0\1\7\1\0\1\7\6\0\35\7\1\122"+
    "\6\7\20\0\1\7\1\0\1\7\6\0\25\7\1\176"+
    "\16\7\20\0\1\7\1\0\1\7\6\0\2\7\1\177"+
    "\41\7\20\0\1\7\1\0\1\7\6\0\31\7\1\174"+
    "\12\7\20\0\1\7\1\0\1\7\6\0\43\7\1\200"+
    "\20\0\1\7\1\0\1\7\6\0\32\7\1\123\11\7"+
    "\20\0\1\7\1\0\1\7\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6222];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\25\1\6\11\1\1\1\11\3\1\1\11"+
    "\1\1\3\11\5\1\2\11\22\1\1\0\4\1\1\11"+
    "\3\0\1\11\24\1\1\0\2\1\1\0\35\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* C√≥digo personalizado */

	// Se agreg√≥ una propiedad para verificar si existen tokens pendientes
	private boolean _existenTokens = false;

	// Contiene las cadenas entre comillas
	StringBuilder string = new StringBuilder();

	public boolean existenTokens(){
		return this._existenTokens;
	}

	public int getLine() {
		return yyline;
	}

	public int getColumn() {
		return yycolumn;
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoFase2(java.io.Reader in) {
   	/* C√≥digo que se ejecutar√° en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 224) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* C√≥digo a ejecutar al finalizar el an√°lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 
  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token next_token() throws java.io.IOException, Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return new Token( sym.EOF, yycolumn, yyline+1, -1, yytext(), "FIN" );
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //throw new Exception();
            }
          case 28: break;
          case 2: 
            { Token t = new Token( sym.IDENTIFICADOR, yycolumn, yyline+1, 0, yytext(), Token.STR_IDENT );
		this._existenTokens = true;
		return t;
            }
          case 29: break;
          case 3: 
            { Token t = new Token( sym.STEP, yycolumn, yyline+1, 0, yytext(), Token.STEP );
		this._existenTokens = true;
		return t;
            }
          case 30: break;
          case 4: 
            { Token t = new Token( 0, yycolumn, yyline+1, 0, yytext(), "SIMBOLO");
		this._existenTokens = true;
		return t;
            }
          case 31: break;
          case 5: 
            { Token t = new Token( sym.PUNTO, yycolumn, yyline+1, -1, yytext(), Token.CARACTER );
		this._existenTokens = true;
		return t;
            }
          case 32: break;
          case 6: 
            { Token t = new Token( sym.COMA, yycolumn, yyline+1, -1, yytext(), Token.CARACTER );
		this._existenTokens = true;
		return t;
            }
          case 33: break;
          case 7: 
            { Token t = new Token( sym.PUNTO_Y_COMA, yycolumn, yyline+1, -1, yytext(), Token.CARACTER );
		this._existenTokens = true;
		return t;
            }
          case 34: break;
          case 8: 
            { Token t = new Token( sym.IGUAL_SIMPLE, yycolumn, yyline+1, -1, yytext(), Token.PALABRA_RESERVADA );
		this._existenTokens = true;
		return t;
            }
          case 35: break;
          case 9: 
            { Token t = new Token( sym.ACCENT_VALUE, yycolumn, yyline+1, 0, yytext(), Token.SIMBOLO );
		this._existenTokens = true;
		return t;
            }
          case 36: break;
          case 10: 
            { string.setLength(0);
			yybegin( CADENA );
            }
          case 37: break;
          case 11: 
            { Token t = new Token( sym.NUMERO_ENTERO, yycolumn, yyline+1, 0, yytext(), Token.TIPO );
		this._existenTokens = true;
		return t;
            }
          case 38: break;
          case 12: 
            { // Quiz√°s este token no proceda y simplemente haya que limpiar los saltos
	//Token t = new Token( 0, yycolumn, yyline+1, 0, "Enter", "NUEVA_LINEA");
	//this._existenTokens = true;
	//return t;
            }
          case 39: break;
          case 13: 
            { // Ignorar cuando se ingrese un espacio
	//Token t = new Token( 0, yycolumn, yyline+1, 0, "Espacio", "ESPACIO");
	//this._existenTokens = true;
	//return t;
            }
          case 40: break;
          case 14: 
            { string.append( yytext() );
            }
          case 41: break;
          case 15: 
            { Token t = new Token( sym.CADENA, yycolumn, yyline+1, -1, string.toString(), Token.STRING );
				this._existenTokens = true;
				yybegin( YYINITIAL );
				return t;
            }
          case 42: break;
          case 16: 
            { Token t = new Token( sym.PALABRA_RESERVADA, yycolumn, yyline+1, -1, yytext(), Token.PALABRA_RESERVADA );
		this._existenTokens = true;
		return t;
            }
          case 43: break;
          case 17: 
            { Token t = new Token( sym.CLEF_VALUE, yycolumn, yyline+1, 0, yytext(), Token.SIMBOLO );
		this._existenTokens = true;
		return t;
            }
          case 44: break;
          case 18: 
            { Token t = new Token( sym.VARIABLE, yycolumn, yyline+1, 0, yytext(), Token.VARIABLE );
		this._existenTokens = true;
		return t;
            }
          case 45: break;
          case 19: 
            { Token t = new Token( sym.OPERADOR_NOTA, yycolumn, yyline+1, 0, yytext(), Token.OPERADOR_NOTA);
		this._existenTokens = true;
		return t;
            }
          case 46: break;
          case 20: 
            { string.append( "\"" );
            }
          case 47: break;
          case 21: 
            { Token t = new Token( sym.END, yycolumn, yyline+1, -1, yytext(), Token.PALABRA_RESERVADA );
		this._existenTokens = true;
		return t;
            }
          case 48: break;
          case 22: 
            { Token t = new Token( sym.TIPO, yycolumn, yyline+1, 0, yytext(), Token.TIPO);
		this._existenTokens = true;
		return t;
            }
          case 49: break;
          case 23: 
            { Token t = new Token( sym.NUMERO_REAL, yycolumn, yyline+1, 0, yytext(), Token.TIPO );
		this._existenTokens = true;
		return t;
            }
          case 50: break;
          case 24: 
            { Token t = new Token( sym.NUMERO_INT_FRAC, yycolumn, yyline+1, 0, yytext(), Token.TIPO );
		this._existenTokens = true;
		return t;
            }
          case 51: break;
          case 25: 
            { Token t = new Token( sym.BEGIN, yycolumn, yyline+1, -1, yytext(), Token.PALABRA_RESERVADA );
		this._existenTokens = true;
		return t;
            }
          case 52: break;
          case 26: 
            { Token t = new Token( sym.IMPORT, yycolumn, yyline+1, -1, yytext(), Token.PALABRA_RESERVADA );
		this._existenTokens = true;
		return t;
            }
          case 53: break;
          case 27: 
            { Token t = new Token( sym.PACKAGE, yycolumn, yyline+1, -1, yytext(), Token.PALABRA_RESERVADA );
		this._existenTokens = true;
		return t;
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
