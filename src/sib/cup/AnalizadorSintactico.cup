package sib.cup;

import java_cup.runtime.*;
import java.io.*;
import sib.flex.*;
import sib.controllers.*;
import sib.inout.*;
import sib.models.datatype.*;
import sib.models.nonterminal.*;

parser code {:

	public ViewsControllerFase1 viewsController;
	public SibOutputController output;
	public SibInputController input;

	public TablaSimbolos tablaSimbolos;

	public void setViewController( ViewsControllerFase1 vc ) {
		this.viewsController = vc;
	}

	public void setOutputController( SibOutputController output ) {
		this.output = output;
	}

	public void setInputController( SibInputController input ) {
		this.input = input;
	}

	public void setTablaSimbolos( TablaSimbolos ts ) {
		this.tablaSimbolos = ts;
	}

:};

/* Terminales sin atributo */
/*
terminalPACKAGE, IMPORT, PUNTO;
*/
terminal BEGIN, IDENTIFICADOR, END, VARIABLE, PROPIEDAD, TIPO, PUNTO_Y_COMA, COMA, IGUAL_SIMPLE;
terminal OPERADOR_NOTA;
terminal STEP, CLEF_VALUE, ARTICULATION_VALUE, CADENA;
terminal LPAREN, RPAREN, TRANS;
terminal PLAY, PLAYPARTITURE, READ, READPARTITURE;

terminal NUMERO_ENTERO, NUMERO_REAL, NUMERO_NFRAC, NUMERO_FRAC;
terminal MAS, MENOS, DIV, MULT, MOD;

terminal IF, ENDIF, ELSE, COMPARADOR, WHILE, ENDWHILE;

/* No terminales sin atributo */
/*
non terminal paquete, imports, un_import;
non terminal String mas_paquete, mas_import;
*/

non terminal Programa programa;

non terminal ListaInstrucciones instrucciones, else_if;
non terminal Instruccion instruccion;
non terminal InstOperador operador;
non terminal InstAsignacion asignacion;

non terminal ListaVariables lista_variables;
non terminal ValorAsignacion valor_asignacion;
non terminal TipoNumero tipo_numeros;

non terminal OperacionTrans operacion_trans;
non terminal ExpresionAritmetica expresion_arit;
non terminal OperandoAritmetico operando_arit;

non terminal Condicion condicion;
non terminal InstIf condicional_if;
non terminal InstWhile bucle_while;

non terminal InstFuncion funcion;

/* Gramática */

programa ::= BEGIN IDENTIFICADOR:id instrucciones:inst END {: 
	Programa p = new Programa( tablaSimbolos );
	p.setInstrucciones( inst );
	p.exec();
	p.print( viewsController );
:};


instrucciones ::= instrucciones:insts instruccion:ins {: insts.add( ins ); RESULT = insts; :}
				| instruccion:ins {: RESULT = new ListaInstrucciones( ins ); :}
				;
instruccion ::= TIPO:t lista_variables:lv PUNTO_Y_COMA {:
					RESULT = new InstDeclaracion( t.toString(), lv );
					:}
				| operador:op PUNTO_Y_COMA {:
					RESULT = op;  // InstOperador
					:}
				| asignacion:as PUNTO_Y_COMA {:
					RESULT = as;  // InstAsignacion
					:}
				| condicional_if:_if PUNTO_Y_COMA {:
					RESULT = _if; // InstIf
					:}
				| bucle_while:wh PUNTO_Y_COMA {:
					RESULT = wh; // InstWhile
					:}
				| funcion:fn PUNTO_Y_COMA {:
					RESULT = fn; // InstFuncion
					:}
				;

lista_variables ::= lista_variables:lv COMA VARIABLE:v {: lv.add( new Variable( v.toString(), tablaSimbolos ) ); RESULT = lv; :}
				| VARIABLE:v {: RESULT = new ListaVariables( new Variable( v.toString(), tablaSimbolos ) ); :}
				;

/* Operador - InstOperador */
operador ::= VARIABLE:v OPERADOR_NOTA:on {: RESULT = new InstOperador( new Variable( v.toString(), tablaSimbolos ), on.toString() ); :}
			| operador:op OPERADOR_NOTA:on {: op.addOperadorNota( on.toString() ); RESULT = op; :}
			;

/* Asignación - InstAsignacion */
asignacion ::= VARIABLE:v IGUAL_SIMPLE valor_asignacion:valor {: RESULT = new InstAsignacion( valor, new Variable( v.toString(), tablaSimbolos ) ); :}
			| PROPIEDAD:p IGUAL_SIMPLE valor_asignacion:valor {:
				String[] parts = (p.toString()).split("\\.");
				String variable = parts[0];
				String property = parts[1];
				RESULT = new InstAsignacion( valor, new Variable( variable, tablaSimbolos ), property );
				:}
			;
valor_asignacion ::= VARIABLE:v {: RESULT = new Variable( v.toString(), tablaSimbolos ); :}
			| PROPIEDAD:pr {:
//				RESULT = RESULT = new StringType("A");
				String[] parts = (pr.toString()).split("\\.");
				String variable = parts[0];
				String property = parts[1];
				Variable v = new Variable( variable, tablaSimbolos );
				RESULT = v.getProperty( property );
				:}
			| STEP:st {: RESULT = new StepType( st.toString() ); :}
			| CLEF_VALUE:cl {: RESULT = new ClefType( cl.toString() ); :}
			| ARTICULATION_VALUE:ac {: RESULT = new StringType( ac.toString() ); :}
			| CADENA:st {: RESULT = new StringType( st.toString() ); :}
			| tipo_numeros:tn {: RESULT = tn; :}
			| operacion_trans:op {: RESULT = op; :}
			| expresion_arit:exp {: RESULT = exp; :}
			;

tipo_numeros ::= NUMERO_ENTERO:n {: RESULT = new TipoNumero( n.toString(), TipoNumero.TYPE_INT ); :}
			| NUMERO_REAL:n {: RESULT = new TipoNumero( n.toString(), TipoNumero.TYPE_FLOAT ); :}
			| NUMERO_NFRAC:n {: RESULT = new TipoNumero( n.toString(), TipoNumero.TYPE_NFRAC ); :}
			| NUMERO_FRAC:n {: RESULT = new TipoNumero( n.toString(), TipoNumero.TYPE_FRAC ); :}
			;

/* Operacion_trans - OperacionTrans */
// De momento no permite anidamiento, sólo transporta variables
operacion_trans ::= TRANS:tr LPAREN:lp VARIABLE:v COMA:cc tipo_numeros:tn RPAREN:rp  {:
				RESULT = new OperacionTrans( new Variable( v.toString(), tablaSimbolos ), tn );
				:}
			;

/* Expresion Aritmetica - ExpresionAritmetica */
expresion_arit ::= operando_arit:oper1 MAS:op operando_arit:oper2 {: RESULT = new ExpresionAritmetica( ExpresionAritmetica.MAS, oper1, oper2 ); :}
			| operando_arit:oper1 MENOS:op operando_arit:oper2 {: RESULT = new ExpresionAritmetica( ExpresionAritmetica.MENOS, oper1, oper2 ); :}
			| operando_arit:oper1 DIV:op operando_arit:oper2 {: RESULT = new ExpresionAritmetica( ExpresionAritmetica.DIV, oper1, oper2 ); :}
			| operando_arit:oper1 MULT:op operando_arit:oper2 {: RESULT = new ExpresionAritmetica( ExpresionAritmetica.MULT, oper1, oper2 ); :}
			| operando_arit:oper1 MOD:op operando_arit:oper2 {: RESULT = new ExpresionAritmetica( ExpresionAritmetica.MOD, oper1, oper2 ); :}
			;

operando_arit ::= tipo_numeros:num {: RESULT = num; :}
			| VARIABLE:v {: RESULT = new Variable( v.toString(), tablaSimbolos ); :}
			;

/* Condicional IF - InstIf */
condicional_if ::= IF:_if LPAREN:lp condicion:cond RPAREN:rp instrucciones:ins else_if:elseif {:
					InstIf oif = new InstIf( cond, ins );
					if ( elseif != null ) {
						oif.setElse( elseif );
					}
					RESULT = oif;
					:}
				;
else_if ::= ENDIF:_endif {: RESULT = null; :}
		| ELSE:_else instrucciones:ins ENDIF:_endif {: RESULT = ins; :}
		;

/* Bucle WHILE - InstWhile */
bucle_while ::= WHILE:wh LPAREN:lp condicion:con RPAREN:rp instrucciones:ins ENDWHILE:endw {:
					RESULT = new InstWhile( con, ins ); :}
				;

condicion ::= valor_asignacion:oper1 COMPARADOR:cc valor_asignacion:oper2 {:
					RESULT = new Condicion( oper1, cc.toString(), oper2 );
					:}
				;

/* Funcion - InstFuncion */
funcion ::= PLAY:pl LPAREN:lp VARIABLE:v RPAREN:rp {:
				FuncionPlay fp = new FuncionPlay( output );
				fp.play( new Variable( v.toString(), tablaSimbolos ) );
				RESULT = fp;
				:}
			| PLAYPARTITURE:pl LPAREN:lp RPAREN:rp {:
				RESULT =  new FuncionPlayPartiture( output );
				:}
			| VARIABLE:v IGUAL_SIMPLE READ:pl LPAREN:lp RPAREN:rp {:
				FuncionRead fr = new FuncionRead( input );
				//fr.read(new Variable( v.toString(), tablaSimbolos ) );
				fr.setDestinationVariable(new Variable( v.toString(), tablaSimbolos ) );
				RESULT = fr;
				:}
			| READPARTITURE:pl LPAREN:lp RPAREN:rp {:
				RESULT = new FuncionReadPartiture( input );
				:}
			;