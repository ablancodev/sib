
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sib.cup;

import java_cup.runtime.*;
import java.io.*;
import sib.flex.*;
import sib.controllers.*;
import sib.inout.*;
import sib.models.nonterminal.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\006\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\005\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\010\005\000\002\010\003\000\002" +
    "\006\004\000\002\006\004\000\002\007\005\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\010\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\015\003\000\002\015\003\000\002\017\010\000" +
    "\002\004\003\000\002\004\005\000\002\020\010\000\002" +
    "\016\005\000\002\021\006\000\002\021\005\000\002\021" +
    "\007\000\002\021\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\004\005\001\002\000\004\002\136\001" +
    "\002\000\004\005\006\001\002\000\020\007\016\010\022" +
    "\024\013\025\011\027\007\040\021\044\010\001\002\000" +
    "\004\021\134\001\002\000\004\021\127\001\002\000\004" +
    "\021\125\001\002\000\004\011\124\001\002\000\004\021" +
    "\121\001\002\000\004\011\120\001\002\000\022\006\117" +
    "\007\016\010\022\024\013\025\011\027\007\040\021\044" +
    "\010\001\002\000\006\013\112\014\111\001\002\000\030" +
    "\006\ufffe\007\ufffe\010\ufffe\024\ufffe\025\ufffe\027\ufffe\040" +
    "\ufffe\041\ufffe\042\ufffe\044\ufffe\045\ufffe\001\002\000\004" +
    "\011\110\001\002\000\004\021\035\001\002\000\004\007" +
    "\031\001\002\000\006\011\027\014\026\001\002\000\004" +
    "\011\025\001\002\000\030\006\ufffa\007\ufffa\010\ufffa\024" +
    "\ufffa\025\ufffa\027\ufffa\040\ufffa\041\ufffa\042\ufffa\044\ufffa" +
    "\045\ufffa\001\002\000\006\011\ufff4\014\ufff4\001\002\000" +
    "\030\006\ufffc\007\ufffc\010\ufffc\024\ufffc\025\ufffc\027\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\044\ufffc\045\ufffc\001\002\000" +
    "\006\011\033\012\032\001\002\000\006\011\ufff6\012\ufff6" +
    "\001\002\000\004\007\034\001\002\000\030\006\ufffd\007" +
    "\ufffd\010\ufffd\024\ufffd\025\ufffd\027\ufffd\040\ufffd\041\ufffd" +
    "\042\ufffd\044\ufffd\045\ufffd\001\002\000\006\011\ufff7\012" +
    "\ufff7\001\002\000\024\007\045\015\040\016\053\017\046" +
    "\020\036\023\052\030\044\031\050\032\042\001\002\000" +
    "\010\011\uffee\022\uffee\043\uffee\001\002\000\022\011\uffed" +
    "\022\uffed\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037\uffe1\043" +
    "\uffed\001\002\000\010\011\ufff1\022\ufff1\043\ufff1\001\002" +
    "\000\010\011\uffeb\022\uffeb\043\uffeb\001\002\000\022\011" +
    "\uffe8\022\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8" +
    "\043\uffe8\001\002\000\004\043\106\001\002\000\022\011" +
    "\uffea\022\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea" +
    "\043\uffea\001\002\000\022\011\ufff2\022\ufff2\033\uffe0\034" +
    "\uffe0\035\uffe0\036\uffe0\037\uffe0\043\ufff2\001\002\000\010" +
    "\011\uffef\022\uffef\043\uffef\001\002\000\010\011\uffec\022" +
    "\uffec\043\uffec\001\002\000\022\011\uffe9\022\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\043\uffe9\001\002\000" +
    "\004\022\076\001\002\000\004\021\071\001\002\000\010" +
    "\011\ufff0\022\ufff0\043\ufff0\001\002\000\014\033\057\034" +
    "\060\035\061\036\056\037\055\001\002\000\012\007\064" +
    "\030\044\031\050\032\042\001\002\000\012\007\064\030" +
    "\044\031\050\032\042\001\002\000\012\007\064\030\044" +
    "\031\050\032\042\001\002\000\012\007\064\030\044\031" +
    "\050\032\042\001\002\000\012\007\064\030\044\031\050" +
    "\032\042\001\002\000\010\011\uffe1\022\uffe1\043\uffe1\001" +
    "\002\000\010\011\uffe4\022\uffe4\043\uffe4\001\002\000\010" +
    "\011\uffe0\022\uffe0\043\uffe0\001\002\000\010\011\uffe5\022" +
    "\uffe5\043\uffe5\001\002\000\010\011\uffe6\022\uffe6\043\uffe6" +
    "\001\002\000\010\011\uffe3\022\uffe3\043\uffe3\001\002\000" +
    "\010\011\uffe2\022\uffe2\043\uffe2\001\002\000\004\007\072" +
    "\001\002\000\004\012\073\001\002\000\010\030\044\031" +
    "\050\032\042\001\002\000\004\022\075\001\002\000\010" +
    "\011\uffe7\022\uffe7\043\uffe7\001\002\000\020\007\016\010" +
    "\022\024\013\025\011\027\007\040\021\044\010\001\002" +
    "\000\024\007\016\010\022\024\013\025\011\027\007\040" +
    "\021\041\103\042\102\044\010\001\002\000\004\011\uffdf" +
    "\001\002\000\030\006\uffff\007\uffff\010\uffff\024\uffff\025" +
    "\uffff\027\uffff\040\uffff\041\uffff\042\uffff\044\uffff\045\uffff" +
    "\001\002\000\020\007\016\010\022\024\013\025\011\027" +
    "\007\040\021\044\010\001\002\000\004\011\uffde\001\002" +
    "\000\022\007\016\010\022\024\013\025\011\027\007\040" +
    "\021\041\105\044\010\001\002\000\004\011\uffdd\001\002" +
    "\000\024\007\045\015\040\016\053\017\046\020\036\023" +
    "\052\030\044\031\050\032\042\001\002\000\004\022\uffdb" +
    "\001\002\000\030\006\ufffb\007\ufffb\010\ufffb\024\ufffb\025" +
    "\ufffb\027\ufffb\040\ufffb\041\ufffb\042\ufffb\044\ufffb\045\ufffb" +
    "\001\002\000\006\011\ufff5\014\ufff5\001\002\000\026\007" +
    "\045\015\040\016\053\017\046\020\036\023\052\026\113" +
    "\030\044\031\050\032\042\001\002\000\004\021\115\001" +
    "\002\000\004\011\ufff3\001\002\000\004\022\116\001\002" +
    "\000\004\011\uffd8\001\002\000\004\002\001\001\002\000" +
    "\030\006\ufff8\007\ufff8\010\ufff8\024\ufff8\025\ufff8\027\ufff8" +
    "\040\ufff8\041\ufff8\042\ufff8\044\ufff8\045\ufff8\001\002\000" +
    "\004\007\122\001\002\000\004\022\123\001\002\000\004" +
    "\011\uffda\001\002\000\030\006\ufff9\007\ufff9\010\ufff9\024" +
    "\ufff9\025\ufff9\027\ufff9\040\ufff9\041\ufff9\042\ufff9\044\ufff9" +
    "\045\ufff9\001\002\000\004\022\126\001\002\000\004\011" +
    "\uffd9\001\002\000\024\007\045\015\040\016\053\017\046" +
    "\020\036\023\052\030\044\031\050\032\042\001\002\000" +
    "\004\022\131\001\002\000\020\007\016\010\022\024\013" +
    "\025\011\027\007\040\021\044\010\001\002\000\022\007" +
    "\016\010\022\024\013\025\011\027\007\040\021\044\010" +
    "\045\133\001\002\000\004\011\uffdc\001\002\000\004\022" +
    "\135\001\002\000\004\011\uffd7\001\002\000\004\002\000" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\014\005\016\006\022\007\017" +
    "\017\023\020\011\021\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\100\006\022\007" +
    "\017\017\023\020\011\021\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\011\042\012\036\013" +
    "\046\014\040\015\053\016\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\061\015\067\001\001\000" +
    "\006\012\061\015\066\001\001\000\006\012\061\015\065" +
    "\001\001\000\006\012\061\015\064\001\001\000\006\012" +
    "\061\015\062\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\003\076\005\016\006\022\007\017" +
    "\017\023\020\011\021\013\001\001\000\020\004\077\005" +
    "\100\006\022\007\017\017\023\020\011\021\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\103\005" +
    "\016\006\022\007\017\017\023\020\011\021\013\001\001" +
    "\000\002\001\001\000\016\005\100\006\022\007\017\017" +
    "\023\020\011\021\013\001\001\000\002\001\001\000\014" +
    "\011\106\012\036\013\046\014\040\015\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\011\113\012\036\013\046\014\040\015\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\011\042\012" +
    "\036\013\046\014\040\015\053\016\127\001\001\000\002" +
    "\001\001\000\020\003\131\005\016\006\022\007\017\017" +
    "\023\020\011\021\013\001\001\000\016\005\100\006\022" +
    "\007\017\017\023\020\011\021\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




	public ViewsControllerFase1 viewsController;
	public SibMusicXMLOutput output;
	public SibMusicXMLInput input;

	public TablaSimbolos tablaSimbolos;

	public void setViewController( ViewsControllerFase1 vc ) {
		this.viewsController = vc;
	}

	public void setOutputController( SibMusicXMLOutput output ) {
		this.output = output;
	}

	public void setInputController( SibMusicXMLInput input ) {
		this.input = input;
	}

	public void setTablaSimbolos( TablaSimbolos ts ) {
		this.tablaSimbolos = ts;
	}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // programa ::= BEGIN IDENTIFICADOR instrucciones END 
            {
              Programa RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int instleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaInstrucciones inst = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
	Programa p = new Programa( tablaSimbolos );
	p.setInstrucciones( inst );
	p.exec();
	p.print( viewsController );

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              ListaInstrucciones RESULT =null;
		int instsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int instsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaInstrucciones insts = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 insts.add( ins ); RESULT = insts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              ListaInstrucciones RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion ins = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaInstrucciones( ins ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= TIPO lista_variables PUNTO_Y_COMA 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVariables lv = (ListaVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = new InstDeclaracion( t.toString(), lv );
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= operador PUNTO_Y_COMA 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstOperador op = (InstOperador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = op;  // InstOperador
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= asignacion PUNTO_Y_COMA 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstAsignacion as = (InstAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = as;  // InstAsignacion
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= condicional_if PUNTO_Y_COMA 
            {
              Instruccion RESULT =null;
		int _ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstIf _if = (InstIf)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = _if; // InstIf
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= bucle_while PUNTO_Y_COMA 
            {
              Instruccion RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstWhile wh = (InstWhile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = wh; // InstWhile
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= funcion PUNTO_Y_COMA 
            {
              Instruccion RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstFuncion fn = (InstFuncion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					RESULT = fn; // InstFuncion
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("instruccion",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_variables ::= lista_variables COMA VARIABLE 
            {
              ListaVariables RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVariables lv = (ListaVariables)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 lv.add( new Variable( v.toString(), tablaSimbolos ) ); RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lista_variables ::= VARIABLE 
            {
              ListaVariables RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ListaVariables( new Variable( v.toString(), tablaSimbolos ) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_variables",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // operador ::= VARIABLE OPERADOR_NOTA 
            {
              InstOperador RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int onleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int onright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object on = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstOperador( new Variable( v.toString(), tablaSimbolos ), on.toString() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // operador ::= operador OPERADOR_NOTA 
            {
              InstOperador RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InstOperador op = (InstOperador)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int onleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int onright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object on = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 op.addOperadorNota( on.toString() ); RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operador",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // asignacion ::= VARIABLE IGUAL_SIMPLE valor_asignacion 
            {
              InstAsignacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorAsignacion valor = (ValorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InstAsignacion( new Variable( v.toString(), tablaSimbolos ), valor ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("asignacion",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // valor_asignacion ::= VARIABLE 
            {
              ValorAsignacion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable( v.toString(), tablaSimbolos ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // valor_asignacion ::= STEP 
            {
              ValorAsignacion RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorCadena( st.toString() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // valor_asignacion ::= CLEF_VALUE 
            {
              ValorAsignacion RESULT =null;
		int clleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int clright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorCadena( cl.toString() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // valor_asignacion ::= ACCENT_VALUE 
            {
              ValorAsignacion RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ac = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorCadena( ac.toString() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // valor_asignacion ::= CADENA 
            {
              ValorAsignacion RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object st = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ValorCadena( st.toString() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valor_asignacion ::= tipo_numeros 
            {
              ValorAsignacion RESULT =null;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoNumero tn = (TipoNumero)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tn; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valor_asignacion ::= operacion_trans 
            {
              ValorAsignacion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OperacionTrans op = (OperacionTrans)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = op; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // valor_asignacion ::= expresion_arit 
            {
              ValorAsignacion RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpresionAritmetica exp = (ExpresionAritmetica)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("valor_asignacion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipo_numeros ::= NUMERO_ENTERO 
            {
              TipoNumero RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNumero( n.toString(), "int" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numeros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipo_numeros ::= NUMERO_REAL 
            {
              TipoNumero RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNumero( n.toString(), "real" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numeros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipo_numeros ::= NUMERO_INT_FRAC 
            {
              TipoNumero RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TipoNumero( n.toString(), "int_frac" ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo_numeros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // operacion_trans ::= TRANS LPAREN VARIABLE COMA tipo_numeros RPAREN 
            {
              OperacionTrans RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TipoNumero tn = (TipoNumero)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new OperacionTrans( new Variable( v.toString(), tablaSimbolos ), tn );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operacion_trans",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresion_arit ::= operando_arit MAS operando_arit 
            {
              ExpresionAritmetica RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OperandoAritmetico oper1 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OperandoAritmetico oper2 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionAritmetica( ExpresionAritmetica.MAS, oper1, oper2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresion_arit ::= operando_arit MENOS operando_arit 
            {
              ExpresionAritmetica RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OperandoAritmetico oper1 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OperandoAritmetico oper2 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionAritmetica( ExpresionAritmetica.MENOS, oper1, oper2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresion_arit ::= operando_arit DIV operando_arit 
            {
              ExpresionAritmetica RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OperandoAritmetico oper1 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OperandoAritmetico oper2 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionAritmetica( ExpresionAritmetica.DIV, oper1, oper2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_arit ::= operando_arit MULT operando_arit 
            {
              ExpresionAritmetica RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OperandoAritmetico oper1 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OperandoAritmetico oper2 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionAritmetica( ExpresionAritmetica.MULT, oper1, oper2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_arit ::= operando_arit MOD operando_arit 
            {
              ExpresionAritmetica RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		OperandoAritmetico oper1 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		OperandoAritmetico oper2 = (OperandoAritmetico)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExpresionAritmetica( ExpresionAritmetica.MOD, oper1, oper2 ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expresion_arit",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operando_arit ::= tipo_numeros 
            {
              OperandoAritmetico RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		TipoNumero num = (TipoNumero)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = num; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando_arit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operando_arit ::= VARIABLE 
            {
              OperandoAritmetico RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable( v.toString(), tablaSimbolos ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("operando_arit",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // condicional_if ::= IF LPAREN condicion RPAREN instrucciones else_if 
            {
              InstIf RESULT =null;
		int _ifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _ifright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object _if = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condicion cond = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaInstrucciones ins = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaInstrucciones elseif = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					InstIf oif = new InstIf( cond, ins );
					if ( elseif != null ) {
						oif.setElse( elseif );
					}
					RESULT = oif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicional_if",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // else_if ::= ENDIF 
            {
              ListaInstrucciones RESULT =null;
		int _endifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _endifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _endif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // else_if ::= ELSE instrucciones ENDIF 
            {
              ListaInstrucciones RESULT =null;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object _else = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaInstrucciones ins = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _endifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int _endifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object _endif = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("else_if",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bucle_while ::= WHILE LPAREN condicion RPAREN instrucciones ENDWHILE 
            {
              InstWhile RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object wh = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Condicion con = (Condicion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaInstrucciones ins = (ListaInstrucciones)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int endwleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endwright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object endw = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new InstWhile( con, ins ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_while",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // condicion ::= valor_asignacion COMPARADOR valor_asignacion 
            {
              Condicion RESULT =null;
		int oper1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int oper1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ValorAsignacion oper1 = (ValorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ccleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ccright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oper2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oper2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ValorAsignacion oper2 = (ValorAsignacion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					RESULT = new Condicion( oper1, cc.toString(), oper2 );
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // funcion ::= PLAY LPAREN VARIABLE RPAREN 
            {
              InstFuncion RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new FuncionPlay( new Variable( v.toString(), tablaSimbolos ) );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // funcion ::= PLAYPARTITURE LPAREN RPAREN 
            {
              InstFuncion RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT =  new FuncionPlayPartiture();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // funcion ::= VARIABLE IGUAL_SIMPLE READ LPAREN RPAREN 
            {
              InstFuncion RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new FuncionRead( new Variable( v.toString(), tablaSimbolos ) );
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // funcion ::= READPARTITURE LPAREN RPAREN 
            {
              InstFuncion RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int rpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				RESULT = new FuncionReadPartiture();
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("funcion",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
