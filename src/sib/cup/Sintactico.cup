package sib.cup;

import java_cup.runtime.*;
import java.io.*;
import sib.flex.*;
import sib.controllers.*;

parser code {:

	public ViewsControllerFase1 viewsController;

	public void setViewController( ViewsControllerFase1 vc ) {
		this.viewsController = vc;
	}

	/*
	private Lexico lexico;

	public static void main(String[] arg){
		parser parserObj = new parser();
		lexico = new Lexico(new InputStreamReader(System.in));
		parserObj.setScanner(lexico);
		try{
			parserObj.parse();
		} catch(Exception x){
			System.out.println("Error fatal.");
		}
	}
	*/
	/* Este es el que estaba usando y funcionaba
	public static void main(String args[]) throws Exception {
		new parser( new AnalizadorLexicoFase2( new InputStreamReader( System.in ) ) ).parse();
	}
	*/
:}; 

/* Inicialización del analizador léxico (si es que hiciera falta) */
//init with {: lexico.init(); :};

/* Solicitud de un terminal al analizador léxico */
//scan with {: return lexico.next_token(); :};

/* Terminales sin atributo */
terminal PALABRA_RESERVADA, PACKAGE, IMPORT, IDENTIFICADOR, PUNTO, COMA, PUNTO_Y_COMA, IGUAL_SIMPLE, BEGIN, END;
terminal LPAREN, RPAREN;
terminal TRANS;

terminal TIPO, VARIABLE, OPERADOR_NOTA, STEP, CLEF_VALUE, ACCENT_VALUE;
terminal CADENA;
terminal NUMERO_ENTERO, NUMERO_REAL, NUMERO_INT_FRAC;
terminal MAS, MENOS, DIV, MULT, MOD;
terminal IF, ENDIF, ELSE, CONDICION_COMPARA, WHILE, ENDWHILE;

/* Terminales con atributo asociado */
//terminal Integer NUMERO;

/* No terminales sin atributo */
non terminal programa, paquete, imports, un_import, instrucciones, instruccion;
non terminal declaracion, lista_variables, mas_lista_variables, orden, operador;
non terminal asignacion, origen_asignacion, tipo_numeros, expresion_arit, operando_arit;
non terminal operacion;
non terminal condicional_if, comparacion, sig_condicion_if, bucle_while;

/* No terminales con atributo asociado */
non terminal String mas_paquete, mas_import;

/* Precedencias */
//precedence left MAS, MENOS; 
//precedence left POR, ENTRE, MODULO;
//precedence left UMENOS;

/* Gramática */

programa ::= paquete imports BEGIN IDENTIFICADOR:id instrucciones END {: viewsController.printOutput( "\nEl programa se llama:" + id ); :};

paquete  ::= PACKAGE IDENTIFICADOR:id mas_paquete:mp {: viewsController.printOutput( "\nPACKAGE:" + id.toString() + mp ); :};
mas_paquete ::= PUNTO:p IDENTIFICADOR:id mas_paquete:mp {: RESULT = new String( "" + p.toString() + id.toString() + mp.toString() ); :}
				| PUNTO_Y_COMA {: RESULT = ";"; :}
				;

imports ::= imports un_import PUNTO_Y_COMA
			|
			;
un_import  ::= IMPORT IDENTIFICADOR:id mas_import:mp {: viewsController.printOutput( "\nIMPORT:" + id.toString() + mp ); :};
mas_import ::= PUNTO:p IDENTIFICADOR:id mas_import:mp {: RESULT = new String( "" + p.toString() + id.toString() + mp.toString() ); :}
				| {: RESULT = ""; :}
				;

instrucciones ::= instrucciones instruccion:ins {: RESULT = ins; :}
					|
					;
instruccion ::= declaracion:dec {: RESULT = dec; :}
				| orden:ord {: RESULT = ord; :}
				;
declaracion ::= TIPO:t lista_variables:lv {: viewsController.printOutput( "\nDefinido:" + t + " " + lv ); RESULT = t.toString() + " " + lv; :};
lista_variables ::= VARIABLE:v mas_lista_variables:mlv {: RESULT = v + " " + mlv;  :};
mas_lista_variables ::= COMA VARIABLE:v mas_lista_variables:mlv {: RESULT = ", " + v + mlv;  :}
						| PUNTO_Y_COMA {: RESULT = ";"; :}
						;

orden ::= operador:op PUNTO_Y_COMA {: viewsController.printOutput( "\nOrden->operador:" + op ); RESULT = op.toString(); :}
		| asignacion:as PUNTO_Y_COMA {:  viewsController.printOutput( "\nAsignación:" + as ); RESULT = as.toString(); :}
		| condicional_if:_if PUNTO_Y_COMA {:  viewsController.printOutput( "\nCondicional IF:" + _if ); RESULT = _if.toString(); :}
		| bucle_while:wh PUNTO_Y_COMA {:  viewsController.printOutput( "\nBucle WHILE:" + wh ); RESULT = wh.toString(); :}
		;

operador ::= VARIABLE:v OPERADOR_NOTA:on {: RESULT = v + "<--" + on;  :}
			| operador:op OPERADOR_NOTA:on {: RESULT = op + "<--" + on;  :}
			;

/* Asignación */
asignacion ::= VARIABLE:v IGUAL_SIMPLE origen_asignacion:oa {: RESULT = v + "<--" + oa; :};
origen_asignacion ::= VARIABLE:v {: RESULT = v; :}
					| STEP:st {: RESULT = st; :}
					| CLEF_VALUE:cl {: RESULT = cl; :}
					| ACCENT_VALUE:ac {: RESULT = ac; :}
					| CADENA:st {: RESULT = st; :}
					| tipo_numeros:tn {: RESULT = tn; :}
					| expresion_arit:exp {: RESULT = exp; :}
					| operacion:op {: RESULT = op; :}
					;

/* Operacion TRANS */
operacion ::= TRANS:tr LPAREN:lp VARIABLE:v COMA:cc tipo_numeros:tn RPAREN:rp  {: RESULT = tr.toString() + lp + v + cc + tn + rp; :}
			| TRANS:tr LPAREN:lp operacion:op COMA:cc tipo_numeros:tn RPAREN:rp  {: RESULT = tr.toString() + lp + op + cc + tn + rp; :}
			| TRANS:tr LPAREN:lp operador:op COMA:cc tipo_numeros:tn RPAREN:rp  {: RESULT = tr.toString() + lp + op + cc + tn + rp; :}
			;

tipo_numeros ::= NUMERO_ENTERO:n {: RESULT = n; :}
				| NUMERO_REAL:n {: RESULT = n; :}
				| NUMERO_INT_FRAC:n {: RESULT = n; :}
				;

expresion_arit ::= operando_arit:oper1 MAS:op operando_arit:oper2 {: RESULT = oper1.toString() + op + oper2.toString(); :}
				| operando_arit:oper1 MENOS:op operando_arit:oper2 {: RESULT = oper1.toString() + op + oper2.toString(); :}
				| operando_arit:oper1 DIV:op operando_arit:oper2 {: RESULT = oper1.toString() + op + oper2.toString(); :}
				| operando_arit:oper1 MULT:op operando_arit:oper2 {: RESULT = oper1.toString() + op + oper2.toString(); :}
				| operando_arit:oper1 MOD:op operando_arit:oper2 {: RESULT = oper1.toString() + op + oper2.toString(); :}
				;

operando_arit ::= tipo_numeros:num {: RESULT = num; :}
				| VARIABLE:v {: RESULT = v; :}
				;

/* Condicional IF */
condicional_if ::= IF:_if LPAREN:lp comparacion:comp RPAREN:rp instrucciones:ins sig_condicion_if:sigif {: RESULT = _if.toString() + lp + comp + rp + ins + sigif; :}
				;

sig_condicion_if ::= ENDIF:_endif {: RESULT = _endif; :}
					| ELSE:_else instrucciones:ins ENDIF:_endif {: RESULT = _else.toString() + ins + _endif; :}
				;

/* Bucle WHILE */
bucle_while ::= WHILE:wh LPAREN:lp comparacion:com RPAREN:rp instrucciones:ins ENDWHILE:endw {: RESULT = wh.toString() + lp + com + rp + ins + endw; :}
				;

comparacion ::= origen_asignacion:oper1 CONDICION_COMPARA:cc origen_asignacion:oper2 {: RESULT = oper1.toString() + cc + oper2; :}
				;


/*
programa ::= programa PALABRA_RESERVADA:r {: System.out.println( "--> RESERVADA:" + r.toString() ); :}
			| 
			;
*/